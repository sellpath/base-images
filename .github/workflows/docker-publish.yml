name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    # branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  NAMESPACE: sellpath
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  TAG_NAME: ""

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
        with:
          cosign-release: 'v2.1.1'

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set TAG_NAME
        id: tag_name
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "::set-output name=tag::${GITHUB_REF/refs\/tags\//}"
          else
            echo "::set-output name=tag::$(echo "${{ github.sha }}" | cut -c1-8)"
          fi

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: run_stage.Dockerfile- Build and push Docker image 
        id: build-and-push-run_stage
        uses: docker/build-push-action@v5 # v5.0.0
        with:
          context: run_stage/
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: "${{ env.REGISTRY }}/${{ env.NAMESPACE }}/python_run_stage:${{ steps.tag_name.outputs.tag }}"
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: build_stage.Dockerfile- Build and push Docker image 
        id: build-and-push-build_stage
        uses: docker/build-push-action@v5 # v5.0.0
        with:
          context: build_stage/
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: "${{ env.REGISTRY }}/${{ env.NAMESPACE }}/python_build_stage:${{ steps.tag_name.outputs.tag }}"
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ui_run_stage.Dockerfile- Build and push Docker image 
        id: build-and-push-ui_run_stage
        uses: docker/build-push-action@v5 # v5.0.0
        with:
          context: ui_run_stage/
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: "${{ env.REGISTRY }}/${{ env.NAMESPACE }}/ui_run_stage:${{ steps.tag_name.outputs.tag }}"
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # - name: ui_run_stage_arm64v8.Dockerfile- Build and push Docker image 
      #   id: build-and-push-ui_run_stage_arm64
      #   uses: docker/build-push-action@v5 # v5.0.0
      #   with:
      #     context: ./ui_run_stage_arm64v8
      #     push: ${{ github.event_name != 'pull_request' }}
      #     tags: "${{ env.REGISTRY }}/${{ env.NAMESPACE }}/ui_run_stage_arm64v8:${{ steps.tag_name.outputs.tag }}"
      #     labels: ${{ steps.meta.outputs.labels }}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max
  
      - name: postgres - Build and push Docker image 
        id: build-and-push-postgres
        uses: docker/build-push-action@v5 # v5.0.0
        with:
          context: postgres/
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: "${{ env.REGISTRY }}/${{ env.NAMESPACE }}/postgres:${{ steps.tag_name.outputs.tag }}"
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
