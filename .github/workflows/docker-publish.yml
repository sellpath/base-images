name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    # branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  NAMESPACE: sellpath
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  TAG_NAME: ""

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
        with:
          cosign-release: 'v2.1.1'

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set TAG_NAME
        id: tag_name
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
          else
            echo "tag=$(echo "${{ github.sha }}" | cut -c1-8)" >> $GITHUB_ENV
          fi

      - name: Write base image version info
        run: |
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "tag: ${GITHUB_REF/refs\/tags\//}, sha: ${{ github.sha }}" > base_image_version.txt
          else
            echo "sha: ${{ github.sha }}" > base_image_version.txt
          fi
          echo "build_date: $BUILD_DATE" >> base_image_version.txt
          echo "runner_os: ${{ runner.os }}" >> base_image_version.txt
          echo "runner_name: ${{ runner.name }}" >> base_image_version.txt
          echo "runner_arch: ${{ runner.arch }}" >> base_image_version.txt

      - name: Copy base_image_version.txt to all build contexts
        run: |
          for dir in postgres run_stage build_stage ui_run_stage; do
            cp base_image_version.txt "$dir/base_image_version.txt"
          done
  
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: run_stage.Dockerfile - Build and push Docker image 
        id: build-and-push-run_stage
        uses: docker/build-push-action@v5 # v5.0.0
        with:
          context: run_stage/
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: "${{ env.REGISTRY }}/${{ env.NAMESPACE }}/python_run_stage:${{ env.tag }}"
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Wait for python_run_stage image to be available in registry
        run: |
          for i in {1..10}; do
            if docker manifest inspect ghcr.io/sellpath/python_run_stage:${{ env.tag }}; then
              echo "Image found in registry."
              break
            fi
            echo "Waiting for image to be available in registry..."
            sleep 6
          done

      - name: Scan python_run_stage image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/sellpath/python_run_stage:${{ env.tag }}
          format: table
          exit-code: 1
          severity: HIGH,CRITICAL

      - name: build_stage.Dockerfile - Build and push Docker image 
        id: build-and-push-build_stage
        uses: docker/build-push-action@v5 # v5.0.0
        with:
          context: build_stage/
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: "${{ env.REGISTRY }}/${{ env.NAMESPACE }}/python_build_stage:${{ env.tag }}"
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Wait for python_build_stage image to be available in registry
        run: |
          for i in {1..10}; do
            if docker manifest inspect ghcr.io/sellpath/python_build_stage:${{ env.tag }}; then
              echo "Image found in registry."
              break
            fi
            echo "Waiting for image to be available in registry..."
            sleep 6
          done

      - name: Scan python_build_stage image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/sellpath/python_build_stage:${{ env.tag }}
          format: table
          exit-code: 1
          severity: HIGH,CRITICAL

      - name: ui_run_stage.Dockerfile - Build and push Docker image 
        id: build-and-push-ui_run_stage
        uses: docker/build-push-action@v5 # v5.0.0
        with:
          context: ui_run_stage/
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: "${{ env.REGISTRY }}/${{ env.NAMESPACE }}/ui_run_stage:${{ env.tag }}"
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Wait for ui_run_stage image to be available in registry
        run: |
          for i in {1..10}; do
            if docker manifest inspect ghcr.io/sellpath/ui_run_stage:${{ env.tag }}; then
              echo "Image found in registry."
              break
            fi
            echo "Waiting for image to be available in registry..."
            sleep 6
          done

      - name: Scan ui_run_stage image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/sellpath/ui_run_stage:${{ env.tag }}
          format: table
          exit-code: 1
          severity: HIGH,CRITICAL

      # - name: ui_run_stage_arm64v8.Dockerfile- Build and push Docker image 
      #   id: build-and-push-ui_run_stage_arm64
      #   uses: docker/build-push-action@v5 # v5.0.0
      #   with:
      #     context: ./ui_run_stage_arm64v8
      #     push: ${{ github.event_name != 'pull_request' }}
      #     tags: "${{ env.REGISTRY }}/${{ env.NAMESPACE }}/ui_run_stage_arm64v8:${{ env.tag }}"
      #     labels: ${{ steps.meta.outputs.labels }}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max
  
      - name: postgres - Build and push Docker image 
        id: build-and-push-postgres
        uses: docker/build-push-action@v5 # v5.0.0
        with:
          context: postgres/
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: "${{ env.REGISTRY }}/${{ env.NAMESPACE }}/postgres:${{ env.tag }}"
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Wait for postgres image to be available in registry
        run: |
          for i in {1..10}; do
            if docker manifest inspect ghcr.io/sellpath/postgres:${{ env.tag }}; then
              echo "Image found in registry."
              break
            fi
            echo "Waiting for image to be available in registry..."
            sleep 6
          done

      - name: Scan postgres image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/sellpath/postgres:${{ env.tag }}
          format: table
          exit-code: 1
          severity: HIGH,CRITICAL
